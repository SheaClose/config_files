source ~/.git-completion.bash
source ~/.git-prompt.sh
txtred='\[\e[0;31m\]' # Red
txtgrn='\[\e[0;32m\]' # Green
txtylw='\[\e[0;33m\]' # Yellow
txtblu='\[\e[0;34m\]' # Blue
txtpur='\[\e[0;35m\]' # Purple
txtcyn='\[\e[0;36m\]' # Cyan
txtrst='\[\e[0m\]'    # Text Reset
GIT_PS1_SHOWDIRTYSTATE=true

# export NODE_ENV='development'
export LS_OPTIONS='--color=auto'
export CLICOLOR='Yes'
export LSCOLORS=exfxcxdxHxegedabagacGx
export ANDROID_HOME=/Users/$USER/Library/Android/sdk
export PATH=$PATH:~/Library/Python/2.7/bin:/usr/local/bin/:/Users/sheaclose/Library/Android/sdk/platform-tools
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home/
export PS1="\n"$txtred$USER" 🍺  "$txtgrn"\w "'$(
        if [[ $(__git_ps1) =~ \*\)$ ]]; then
            echo "'$txtylw'"$(__git_ps1 "(%s)")
        elif [[ $(__git_ps1) =~ \+\)$ ]]; then
            echo "'$txtpur'"$(__git_ps1 "(%s)")
        else
            echo "'$txtcyn'"$(__git_ps1 "(%s)")
        fi)'"\n"$txtblu"=> "$txtrst
# #################################
# # Functions                     #
# #################################
addurl (){
  echo $1
  git remote add origin $1
}

gacm (){
  git add -A
  git commit -m "$1"
}

nodeman (){
  nodemon --inspect $1
}

cdl () {
  cd $1
  ls
}

gc (){
  git clone "$1" && cd "$(basename -s .git "$1")"
  if [ "$2" = "lsq" ]
  then
    live-server index.html
  fi
}

seturl (){
  git remote set-url origin $1
}

removegitref (){
  git filter-branch --tree-filter "rm -rf $1" --prune-empty HEAD
  git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
  git add .gitignore
  git commit -m "Removing $1 from git history"
  git gc
}

mkcd () {
  mkdir $1
  cd $1
}

trash(){
  mv $1 ~/.Trash 
}

debugger(){
  # if [ "$1" = "n" ] 
  # then
  #   open "rndebugger://set-debugger-loc?host=localhost&port=8081"
  # fi
  open "rndebugger://set-debugger-loc?host=localhost&port=8081"
  npm run android
}

# gpb(){
#   git push origin $(git name-rev --name-only HEAD)
#   git checkout dev
# }

# example of piping exit codes to other commands.
gpb(){
  git push origin $(git name-rev --name-only HEAD) | 
  if [ "$?" = 0 ]
  then 
    git checkout dev
  fi
}

rename (){
  find . -type f -maxdepth 1 -print0 | while read -d $'\0' file; do mv "$file" "$( echo "$file" | sed "s/\.\/$1/$2/" )" ; done
  ls
}

gpc(){
  echo            "****************************************"
  echo pushing to "$(git branch | grep \* | cut -d ' ' -f2)"
  echo            "****************************************"
  git push origin "$(git branch | grep \* | cut -d ' ' -f2)"
}

deploy(){
  gacm 'testing auto-deploy'
  gpc
}

updateanddeploy(){
  deploy
  git checkout -
  git merge - 
  gpc
  git checkout -
}

dockerbuild(){
  echo "Type the name of your Docker Image [ENTER:(git branch name)]:"
  read image
  if [ -z $image ]; then image=$(git branch | grep \* | cut -d ' ' -f2); fi;
  ports=''
  echo "Type how many ports to expose [ENTER:1]:"
  read nums
  if [ -z $nums]; then nums=1; fi;
  for ((i = 1; i <= nums; i++)); do 
    echo "Type the port number to expose [ENTER]:"
    read expose
    echo "Type the port number to listen [ENTER]:"
    read listen
    ports+=" -p $expose:$listen"
  done
  echo $ports
  echo "Type the Node Env [ENTER:development]:"
  read node_env
  if [ -z $node_env ]; then node_env=development; fi;
  echo docker build -t $image ./
  echo docker run -e NODE_ENV=$node_env -i $ports --name $image $image
  docker build -t $image ./
  docker run -e NODE_ENV=$node_env -i $ports --name $image $image
}
dockerkill(){
  echo "Type the name of the Docker Container you want to destroy [default:git-branch-name]:"
  read process_to_kill
  if [ -z $process_to_kill ]; then process_to_kill=$(git branch | grep \* | cut -d ' ' -f2); fi;
  docker stop $process_to_kill
  docker rm $process_to_kill
  docker image rm $process_to_kill
}

ebdeploy(){
  echo "Type the name of the env to deploy:"
  read env
  echo "Type the name of the region to deploy [default: us-east-1]"
  read region
  if [ -z $region ]; then region=us-east-1; fi;
  eb deploy $env -r $region --label $(echo $(date) | sed 's/ //g')
}

# #################################
# # Aliases                       #
# #################################
alias .="code ."
alias remove="rm -rf"
alias gs="git status"
alias start="npm run start"
alias dev="npm run dev"
alias gb="git branch"
alias gps="git push --set-upstream origin master"
alias gpull="git pull origin $(git branch | grep \* | cut -d ' ' -f2)"
alias gch="git checkout"
alias gr="git remote -v"
alias ll="ls -lah"
alias f="open -a Finder ./"
alias prof="code ~/.bash_profile"
alias src="source ~/.bash_profile"
alias please="npm"
alias ios="npx react-native run-ios --device \"Test phone\""
alias fetchall="git fetch --all"
# alias aws="aws-shell"
alias d="docker"
alias dcu="docker-compose up"
alias dcd="docker-compose down"
alias dcr="docker-compose restart"

alias passphrase="ssh-add ~/.ssh/id_rsa"
